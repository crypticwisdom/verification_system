# Generated by Django 4.1.6 on 2023-02-20 09:21

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=200, null=True, unique=True)),
                ('username', models.CharField(blank=True, max_length=250, null=True, unique=True)),
                ('image', models.ImageField(default='default/user.jpg', null=True, upload_to='users/')),
                ('slug', models.SlugField(blank=True, max_length=350, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('code', models.CharField(blank=True, max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Tells if this channel is available for use.')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_type', models.CharField(choices=[('partner_manager', 'Admin'), ('super_admin', 'Super Admin')], default='super_admin', max_length=100)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=10, default=0.0, max_digits=20, null=True)),
                ('discount', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=20, null=True)),
                ('description', models.TextField()),
                ('platform_percent', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='TM30 percentage for the service', max_digits=20, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Tells if this service is available for use. i.e Services can be deactivated.')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, choices=[('Platform', 'platform'), ('Partner-Manager', 'partner-manager'), ('Agency', 'agency'), ('Sub-Agency', 'sub-agency'), ('Individual', 'individual'), ('Corporate-Business', 'corporate-business'), ('Sub-Corporate-Business', 'sub-corporate-business')], max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Agency, Sub-Agency, Business, Individual ... names', max_length=250, null=True, unique=True)),
                ('logo', models.ImageField(default='default/user.jpg', null=True, upload_to='logos/')),
                ('description', models.TextField(blank=True, null=True)),
                ('approved', models.BooleanField(default=False)),
                ('business_type', models.CharField(blank=True, help_text='For businesses', max_length=20, null=True)),
                ('business_size', models.IntegerField(blank=True, default=0, help_text='For businesses', null=True)),
                ('reg_number', models.CharField(blank=True, help_text='For businesses', max_length=150, null=True)),
                ('cac_number', models.CharField(blank=True, help_text='For businesses', max_length=150, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('created_by', models.OneToOneField(blank=True, help_text='Who created this Sub Agency', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('parent_agency', models.ForeignKey(blank=True, help_text='Field to hold the parent agency that created this sub agency.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_agency', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='account.usertype')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('amount', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(blank=True, choices=[('Pending', 'pending'), ('Success', 'success'), ('Canceled', 'canceled'), ('Failed', 'failed')], max_length=20, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=200, null=True)),
                ('payment_method', models.CharField(blank=True, max_length=200, null=True)),
                ('payment_id', models.CharField(blank=True, choices=[('Pending', 'pending'), ('Success', 'success'), ('Canceled', 'canceled'), ('Failed', 'failed')], max_length=200, null=True)),
                ('email', models.CharField(blank=True, max_length=200, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=200, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now_add=True)),
                ('channel', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='account.channel')),
                ('service', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='account.service')),
                ('transaction_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='service',
            name='agency',
            field=models.ForeignKey(help_text='If agencies can have more than 1 service.', on_delete=django.db.models.deletion.CASCADE, to='account.userdetail'),
        ),
        migrations.AddField(
            model_name='service',
            name='channel_available',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='account.channel'),
        ),
    ]
